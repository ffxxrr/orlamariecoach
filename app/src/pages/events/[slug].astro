---
import MainLayout from '../../layouts/MainLayout.astro';
import { connectToDatabase } from '../../utils/db/connect';
import Event from '../../utils/db/models/Event';
import { marked } from 'marked'; // To render markdown description if needed

export const prerender = false; // This page is dynamic

const { slug } = Astro.params;
let event = null;
let fetchError = null;

try {
  if (!slug) {
    throw new Error("Event slug is missing.");
  }
  await connectToDatabase();
  event = await Event.findOne({ slug: slug }).lean(); // Find by slug

  if (!event) {
    // If not found by slug, maybe try finding by ID if the slug looks like an ID? (Optional fallback)
    // This might happen if old links used IDs or if slugs weren't generated correctly initially.
    // const ObjectId = mongoose.Types.ObjectId;
    // if (ObjectId.isValid(slug)) {
    //   event = await Event.findById(slug).lean();
    // }

    // If still not found, set error
    if (!event) {
        fetchError = `Event not found for slug: ${slug}`;
        // Set status code to 404
        Astro.response.status = 404;
    }
  }
} catch (error) {
  console.error(`Error fetching event with slug ${slug}:`, error);
  fetchError = "Could not load event details at this time.";
   // Set status code to 500 or keep 404 if it was already set
   if (Astro.response.status !== 404) {
       Astro.response.status = 500;
   }
}

// Format date for display
function formatDate(dateString) {
  if (!dateString) return 'N/A';
  try {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric', month: 'long', day: 'numeric', weekday: 'long'
    });
  } catch (e) {
    return 'Invalid Date';
  }
}

// Format time for display
function formatTime(dateString) {
    if (!dateString) return '';
    try {
        return new Date(dateString).toLocaleTimeString('en-US', {
            hour: 'numeric', minute: '2-digit', hour12: true, timeZoneName: 'short' // Include timezone if helpful
        });
    } catch (e) {
        return '';
    }
}

// Render description (assuming plain text, but could use marked for Markdown)
const renderedDescription = event?.description ? marked.parse(event.description.replace(/\n/g, '<br/>')) : ''; // Basic line break handling or use marked

---

<MainLayout title={event ? `${event.name} - Event Details` : 'Event Details'}>
  <section class="py-12 md:py-20 bg-white dark:bg-gray-900">
    <div class="container mx-auto px-4 max-w-4xl">

      {fetchError && (
        <div class="text-center">
          <h1 class="text-2xl font-bold text-red-600 dark:text-red-400 mb-4">Error Loading Event</h1>
          <p class="text-gray-600 dark:text-gray-400">{fetchError}</p>
          <a href="/events" class="mt-6 inline-block text-blue-600 dark:text-blue-500 hover:underline">
            &larr; Back to Events List
          </a>
        </div>
      )}

      {event && !fetchError && (
        <article>
          <header class="mb-8 text-center">
            <span class="block text-sm font-semibold text-blue-600 dark:text-blue-400 mb-2 uppercase tracking-wider">{event.type}</span>
            <h1 class="text-3xl md:text-5xl font-extrabold text-gray-900 dark:text-white mb-4">{event.name}</h1>
            <div class="text-lg text-gray-600 dark:text-gray-400 space-y-1">
               <p>
                 <span class="font-semibold">When:</span> {formatDate(event.date)} at {formatTime(event.date)}
               </p>
               <p>
                 <span class="font-semibold">Where:</span> {event.location}
               </p>
            </div>
          </header>

          {event.image && (
            <div class="mb-8 rounded-lg overflow-hidden shadow-lg">
              <img src={event.image} alt={`Image for ${event.name}`} class="w-full h-auto max-h-[500px] object-cover" />
            </div>
          )}

          <div class="prose prose-lg dark:prose-invert max-w-none mx-auto text-gray-800 dark:text-gray-200">
            <!-- Use set:html to render the description -->
            <Fragment set:html={renderedDescription} />
          </div>

          <!-- Optional: Add a Call to Action / Registration Link -->
          <div class="mt-10 text-center">
             <a href="/booking" class="inline-block text-white bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 shadow-lg shadow-blue-500/50 dark:shadow-lg dark:shadow-blue-800/80 font-medium rounded-lg text-lg px-8 py-3 text-center mr-2 mb-2">
                Register / Book Now
             </a>
             <p class="mt-4 text-sm text-gray-500 dark:text-gray-400">(Link goes to general booking page - customize if specific event registration is needed)</p>
          </div>

          <div class="mt-12 text-center border-t border-gray-200 dark:border-gray-700 pt-8">
            <a href="/events" class="text-blue-600 dark:text-blue-500 hover:underline">
              &larr; Back to All Events
            </a>
          </div>
        </article>
      )}

    </div>
  </section>
</MainLayout>
