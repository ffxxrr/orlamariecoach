---
import AdminLayout from '../../../layouts/AdminLayout.astro';
// Removed incorrect import: import { Button, Input, Textarea, Label, Checkbox, Select } from 'flowbite-astro';
// Using standard HTML elements with Flowbite classes instead.
// Removed Button import as well.

const { id } = Astro.params; // Get testimonial ID from URL parameter
let testimonial = null;
let fetchError = null;
let errorMessage: string | null = null;
let successMessage: string | null = null;

// Fetch existing testimonial data for the form
try {
  const apiUrl = new URL(`/api/admin/testimonials?id=${id}`, Astro.url.origin);
  const response = await fetch(apiUrl.toString());
  if (!response.ok) {
    throw new Error(`API Error: ${response.status} ${response.statusText}`);
  }
  testimonial = await response.json();
} catch (error) {
  console.error(`Failed to fetch testimonial with ID ${id}:`, error);
  fetchError = error.message || `Could not load testimonial with ID ${id}.`;
}

// Handle form submission for updates
if (Astro.request.method === 'PUT') {
  try {
    const requestBody = await Astro.request.text();
    const testimonialData = JSON.parse(requestBody);

    // Basic validation
    if (!testimonialData.clientName || !testimonialData.quote) {
      throw new Error('Missing required fields: Client Name, Quote.');
    }
     if (testimonialData.rating && (testimonialData.rating < 1 || testimonialData.rating > 5)) {
        throw new Error('Rating must be between 1 and 5.');
    }
    // Ensure order is a number
    testimonialData.order = parseInt(testimonialData.order || '0', 10);
    // Ensure date is handled correctly
    testimonialData.date = testimonialData.date ? new Date(testimonialData.date) : undefined;


    // Send PUT request to the API endpoint
    const apiUrl = new URL(`/api/admin/testimonials?id=${id}`, Astro.url.origin);
    const response = await fetch(apiUrl.toString(), {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(testimonialData),
    });

    const result = await response.json();

    if (!response.ok) {
      throw new Error(result.message || `API Error: ${response.status}`);
    }

    successMessage = `Testimonial from "${result.clientName}" updated successfully!`;
    testimonial = result; // Update local variable to reflect changes

  } catch (error) {
    console.error('Error updating testimonial:', error);
    errorMessage = error.message || 'An unexpected error occurred while updating.';
  }
}

// Helper to format date for input type="date"
function formatDateForInput(dateString) {
    if (!dateString) return '';
    try {
        const date = new Date(dateString);
        // Format as YYYY-MM-DD
        const year = date.getFullYear();
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const day = date.getDate().toString().padStart(2, '0');
        return `${year}-${month}-${day}`;
    } catch (e) {
        return ''; // Return empty if date is invalid
    }
}
---

<AdminLayout title={testimonial ? `Edit: ${testimonial.clientName}` : 'Edit Testimonial'}>
  <div class="flex justify-between items-center mb-6">
    <h1 class="text-2xl font-semibold text-gray-900 dark:text-white">
      {testimonial ? `Edit Testimonial: ${testimonial.clientName}` : 'Edit Testimonial'}
    </h1>
    <a href="/admin/testimonials" class="py-2 px-3 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-100 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700">
      &larr; Back to Testimonials
    </a>
  </div>

   {fetchError && (
    <div class="p-4 mb-4 text-sm text-red-800 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400" role="alert">
      <span class="font-medium">Error!</span> {fetchError} Cannot edit testimonial.
    </div>
  )}

  {/* Inline messages controlled by client-side script (initially hidden) */}
  <div id="success-message-div" class="p-4 mb-4 text-sm text-green-800 rounded-lg bg-green-50 dark:bg-gray-800 dark:text-green-400 hidden" role="alert">
    <span id="success-message-span" class="font-medium"></span> {/* Content set by script */}
  </div>
  <div id="error-message-div" class="p-4 mb-4 text-sm text-red-800 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400 hidden" role="alert">
     <span id="error-message-span" class="font-medium"></span> {/* Content set by script */}
  </div>

  {/* Only show form if testimonial data was fetched successfully */}
  {testimonial && !fetchError && (
    <form id="edit-testimonial-form" class="space-y-6 bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
      <input type="hidden" name="testimonialId" value={id} />
      <div>
        <label for="clientName" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Client Name <span class="text-red-600">*</span></label>
        <input type="text" name="clientName" id="clientName" value={testimonial.clientName} required class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" />
      </div>
      <div>
        <label for="role" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Client Role/Title (Optional)</label>
        <input type="text" name="role" id="role" value={testimonial.role || ''} class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" />
      </div>
       <div>
        <label for="quote" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Quote <span class="text-red-600">*</span></label>
        <textarea name="quote" id="quote" rows={5} required class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">{testimonial.quote}</textarea>
      </div>
       <div>
        <label for="image" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Image URL (Optional)</label>
        <input type="url" name="image" id="image" value={testimonial.image || ''} class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" />
      </div>
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div>
          <label for="rating" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Rating (1-5, Optional)</label>
          <input type="number" name="rating" id="rating" min="1" max="5" value={testimonial.rating} class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" />
        </div>
        <div>
          <label for="date" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Date (Optional)</label>
          <input type="date" name="date" id="date" value={formatDateForInput(testimonial.date)} class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" />
        </div>
         <div>
           <label for="order" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Display Order</label>
           <input type="number" name="order" id="order" value={testimonial.order ?? 0} class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" />
           <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">Lower numbers appear first.</p>
         </div>
      </div>
       <div>
         <label class="flex items-center text-sm font-medium text-gray-900 dark:text-white">
           <input type="checkbox" name="isVisible" id="isVisible" class="w-4 h-4 text-primary-600 bg-gray-100 border-gray-300 rounded focus:ring-primary-500 dark:focus:ring-primary-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600 mr-2" checked={testimonial.isVisible}/>
           Show on Public Site
         </label>
       </div>
      <div>
        <button type="submit" class="text-white bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">Update Testimonial</button>
      </div>
    </form>
  )}
</AdminLayout>

<script>
  // Client-side script to handle PUT request via fetch
  const form = document.getElementById('edit-testimonial-form');
  form?.addEventListener('submit', async (event) => {
    event.preventDefault(); // Prevent default form submission

    const formData = new FormData(form as HTMLFormElement);
    const testimonialId = formData.get('testimonialId');
    const testimonialData = {
      clientName: formData.get('clientName'),
      quote: formData.get('quote'),
      role: formData.get('role'),
      image: formData.get('image'),
      rating: formData.get('rating') ? parseInt(formData.get('rating').toString(), 10) : undefined,
      date: formData.get('date') || undefined, // Keep as string or null/undefined
      order: parseInt(formData.get('order')?.toString() || '0', 10),
      isVisible: formData.get('isVisible') === 'on',
    };

     // Basic validation
    if (testimonialData.rating && (testimonialData.rating < 1 || testimonialData.rating > 5)) {
        alert('Rating must be between 1 and 5.');
        return; // Stop submission
    }

    try {
      const response = await fetch(`/api/admin/testimonials?id=${testimonialId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(testimonialData),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.message || `API Error: ${response.status}`);
      }

      // Success: Show inline success message and hide the form
      const successDiv = document.getElementById('success-message-div');
      const successSpan = document.getElementById('success-message-span');
      const errorDiv = document.getElementById('error-message-div'); // Get error div to hide it

      if (successDiv && successSpan) {
        successSpan.textContent = `Success! Testimonial from "${result.clientName}" updated successfully!`;
        successDiv.classList.remove('hidden');
        // Hide the form
        const editForm = document.getElementById('edit-testimonial-form');
        if (editForm) {
            editForm.classList.add('hidden');
        }
      } else {
         // Fallback alert if elements not found
         alert('Testimonial updated successfully!');
      }
      // Optionally redirect: window.location.href = '/admin/testimonials';


    } catch (error) {
      console.error('Error updating testimonial via fetch:', error);
       // Error: Show inline error message
      const errorDiv = document.getElementById('error-message-div');
      const errorSpan = document.getElementById('error-message-span');
      const successDiv = document.getElementById('success-message-div'); // Get success div to hide it

       if (errorDiv && errorSpan) {
        errorSpan.textContent = `Update Error! ${error.message || 'An unexpected error occurred.'}`;
        errorDiv.classList.remove('hidden');
      } else {
          // Fallback alert if elements not found
          alert(`Failed to update testimonial: ${error.message}`);
      }
       if (successDiv) {
          successDiv.classList.add('hidden'); // Hide any previous success message
      }
    }
  });
</script>
