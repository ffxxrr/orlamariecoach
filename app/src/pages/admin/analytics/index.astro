---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import TrafficChart from '../../../components/admin/Dashboard/TrafficChart.astro'; // Import the chart component
// Using standard HTML elements with Flowbite classes.

// Fetch analytics stats from the API endpoint
let stats = null;
let fetchError = null;
try {
  // Fetch stats for the last 30 days by default
  const apiUrl = new URL('/api/admin/analytics/stats?days=30', Astro.url.origin);
  const response = await fetch(apiUrl.toString());
  if (!response.ok) {
    throw new Error(`API Error: ${response.status} ${response.statusText}`);
  }
  stats = await response.json();
} catch (error) {
  console.error('Failed to fetch analytics stats:', error);
  fetchError = error.message || 'Could not load analytics data.';
}

// Helper to format numbers (optional)
function formatNumber(num) {
    return num?.toLocaleString() ?? 'N/A';
}

// Prepare data for the chart if stats are available
let trafficChartData = null;
if (stats && stats.dailyViews) {
  trafficChartData = {
    labels: stats.dailyViews.map(item => item._id), // Dates (YYYY-MM-DD)
    datasets: [{
      label: 'Page Views',
      data: stats.dailyViews.map(item => item.count), // Counts
      // Styling will be applied by the component defaults or can be overridden here
    }]
  };
}
---

<AdminLayout title="Website Analytics">
  <div class="mb-6">
    <h1 class="text-2xl font-semibold text-gray-900 dark:text-white">Website Analytics</h1>
    <p class="text-gray-500 dark:text-gray-400">Overview of website traffic (Last {stats?.timePeriodDays || 30} days).</p>
     {/* TODO: Add date range selector */}
  </div>

  {fetchError && (
    <div class="p-4 mb-4 text-sm text-red-800 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400" role="alert">
      <span class="font-medium">Error!</span> {fetchError}
    </div>
  )}

  {/* Display stats cards if data loaded */}
  {stats && !fetchError && (
    <>
      {/* Stats Cards Section */}
      <div class="grid grid-cols-1 gap-4 md:grid-cols-2 md:gap-6 xl:grid-cols-4 2xl:gap-7.5 mb-6">
        {/* Replaced Card component with div + Flowbite classes */}
        <div class="rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-700 dark:bg-gray-800">
          <h5 class="text-sm font-medium text-gray-500 dark:text-gray-400">Total Views</h5>
          <p class="mt-1 text-3xl font-semibold text-gray-900 dark:text-white">{formatNumber(stats.totalViews)}</p>
        </div>
         <div class="rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-700 dark:bg-gray-800">
          <h5 class="text-sm font-medium text-gray-500 dark:text-gray-400">Unique Visitors (Approx.)</h5>
          <p class="mt-1 text-3xl font-semibold text-gray-900 dark:text-white">{formatNumber(stats.uniqueVisitors)}</p>
        </div>
         {/* Add more cards for bounce rate, avg time, etc. if calculated */}
      </div>

       {/* Traffic Chart Section */}
       <div class="grid grid-cols-1 gap-4 md:gap-6 xl:grid-cols-1 2xl:gap-7.5 mb-6">
         <div class="rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-700 dark:bg-gray-800">
            <h5 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Traffic Over Time</h5>
            <div class="min-h-[350px]"> {/* Ensure sufficient height for the chart */}
              {trafficChartData ? (
                <> {/* Wrap true branch in fragment */}
                  <TrafficChart chartData={trafficChartData} /> {/* REMOVED client:load directive */}
                </>
              ) : (
                <> {/* Wrap false branch in fragment */}
                  <div class="flex items-center justify-center h-full text-gray-400">
                      {fetchError ? 'Could not load chart data.' : 'Loading chart data...'}
                  </div>
                </>
              )}
            </div>
         </div>
       </div>

      {/* Top Pages and Referrers Tables */}
      <div class="grid grid-cols-1 gap-4 md:gap-6 xl:grid-cols-2 2xl:gap-7.5">
        <div class="rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-700 dark:bg-gray-800">
          <h5 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Top Pages</h5>
          {stats.topPages && stats.topPages.length > 0 ? (
            <div class="overflow-x-auto">
              <table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
                <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                  <tr>
                    <th scope="col" class="py-3 px-6">Page URL</th>
                    <th scope="col" class="py-3 px-6">Views</th>
                  </tr>
                </thead>
                <tbody>
                  {stats.topPages.map(page => (
                    <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                      <td class="py-3 px-6 font-medium text-gray-900 dark:text-white truncate" title={page._id}>{page._id}</td>
                      <td class="py-3 px-6">{formatNumber(page.count)}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          ) : (
            <p class="text-gray-500 dark:text-gray-400">No page view data available.</p>
          )}
        </Card>

        <div class="rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-700 dark:bg-gray-800">
          <h5 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Top Referrers</h5>
           {stats.topReferrers && stats.topReferrers.length > 0 ? (
            <div class="overflow-x-auto">
              <table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
                <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                  <tr>
                    <th scope="col" class="py-3 px-6">Referrer Domain</th>
                    <th scope="col" class="py-3 px-6">Views</th>
                  </tr>
                </thead>
                <tbody>
                  {stats.topReferrers.map(ref => (
                     <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                      <td class="py-3 px-6 font-medium text-gray-900 dark:text-white truncate" title={ref._id}>{ref._id || '(Direct)'}</td>
                      <td class="py-3 px-6">{formatNumber(ref.count)}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          ) : (
            <p class="text-gray-500 dark:text-gray-400">No referrer data available.</p>
          )}
        </Card>
      </div>
    </>
  )}

</AdminLayout>
