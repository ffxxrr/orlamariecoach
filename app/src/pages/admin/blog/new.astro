---
import AdminLayout from '../../../layouts/AdminLayout.astro';
// Removed incorrect import: import { Button, Input, Textarea, Label, Checkbox, Select } from 'flowbite-astro';
// Using standard HTML elements with Flowbite classes instead.

let errorMessage: string | null = null;
let successMessage: string | null = null;

if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData();
    const postData = {
      title: formData.get('title')?.toString(),
      description: formData.get('description')?.toString(),
      content: formData.get('content')?.toString(), // Consider using a Markdown editor component later
      category: formData.get('category')?.toString(),
      tags: formData.get('tags')?.toString().split(',').map(tag => tag.trim()).filter(tag => tag), // Simple comma-separated tags
      featured: formData.get('featured') === 'on', // Checkbox value is 'on' if checked
      // pubDate is set by default in the model
    };

    // Basic client-side validation check (API has more robust validation)
    if (!postData.title || !postData.description || !postData.content || !postData.category) {
      throw new Error('Missing required fields: Title, Description, Content, Category.');
    }

    // Send POST request to the API endpoint
    const apiUrl = new URL('/api/admin/blog', Astro.url.origin);
    const response = await fetch(apiUrl.toString(), {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(postData),
    });

    const result = await response.json();

    if (!response.ok) {
      throw new Error(result.message || `API Error: ${response.status}`);
    }

    successMessage = `Blog post "${result.title}" created successfully!`;
    // Optionally redirect after success: return Astro.redirect('/admin/blog');
    // Clear form or stay on page to show success message

  } catch (error) {
    console.error('Error creating blog post:', error);
    errorMessage = error.message || 'An unexpected error occurred.';
  }
}

// TODO: Fetch categories dynamically if needed
const categories = ['Career', 'Life Balance', 'Mindset', 'Productivity'];
---

<AdminLayout title="Add New Blog Post">
  <div class="flex justify-between items-center mb-6">
    <h1 class="text-2xl font-semibold text-gray-900 dark:text-white">Add New Blog Post</h1>
    <Button href="/admin/blog" color="alternative" size="sm">
      &larr; Back to Posts
    </Button>
  </div>

  {successMessage && (
    <div class="p-4 mb-4 text-sm text-green-800 rounded-lg bg-green-50 dark:bg-gray-800 dark:text-green-400" role="alert">
      <span class="font-medium">Success!</span> {successMessage}
    </div>
  )}
  {errorMessage && (
    <div class="p-4 mb-4 text-sm text-red-800 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400" role="alert">
      <span class="font-medium">Error!</span> {errorMessage}
    </div>
  )}

  {/* Only show form if no success message or if there was an error */}
  {(!successMessage || errorMessage) && (
    <form method="POST" class="space-y-6 bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
      <div>
        <label for="title" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Title <span class="text-red-600">*</span></label>
        <input type="text" name="title" id="title" placeholder="Enter post title" required class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" />
      </div>
       <div>
        <label for="description" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Short Description <span class="text-red-600">*</span></label>
        <textarea name="description" id="description" placeholder="Brief summary for listing pages..." rows={2} required class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"></textarea>
      </div>
      <div>
        <label for="content" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Content (Markdown) <span class="text-red-600">*</span></label>
        <textarea name="content" id="content" placeholder="Write your blog post content here using Markdown..." rows={15} required class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"></textarea>
        <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">Markdown is supported.</p>
      </div>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label for="category" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Category <span class="text-red-600">*</span></label>
          <select name="category" id="category" required class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
            <option value="" disabled selected>Select a category</option>
            {categories.map(cat => <option value={cat}>{cat}</option>)}
          </select>
        </div>
        <div>
          <label for="tags" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Tags (comma-separated)</label>
          <input type="text" name="tags" id="tags" placeholder="e.g., coaching, goals, success" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" />
        </div>
      </div>
       <div>
        <label class="flex items-center text-sm font-medium text-gray-900 dark:text-white">
          <input type="checkbox" name="featured" id="featured" class="w-4 h-4 text-primary-600 bg-gray-100 border-gray-300 rounded focus:ring-primary-500 dark:focus:ring-primary-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600 mr-2"/>
          Mark as Featured Post
        </label>
      </div>
      <div>
        <button type="submit" class="text-white bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">Create Post</button>
      </div>
    </form>
  )}

</AdminLayout>
