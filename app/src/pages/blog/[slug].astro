---
// import { getCollection } from 'astro:content'; // Removed
import MainLayout from '../../layouts/MainLayout.astro';
import { Image } from 'astro:assets'; // Use Astro's Image component
import { Markdown } from 'astro/components'; // Import Markdown component for rendering content
import { connectToDatabase } from '../../utils/db/connect.js';
import BlogPost from '../../utils/db/models/BlogPost.js';

// This page is now server-rendered (or on-demand rendered)
// export async function getStaticPaths() { ... } // Removed

const { slug } = Astro.params;
let post = null;

if (!slug) {
  // Handle case where slug is missing, though Astro routing should prevent this
  console.error("Blog post slug is missing.");
  // Optionally return a 404 or redirect
} else {
  try {
    await connectToDatabase();
    post = await BlogPost.findOne({ slug: slug }).lean();
  } catch (error) {
    console.error(`Error fetching blog post with slug "${slug}":`, error);
    // Optionally return a 500 error
  }
}

// Handle post not found
if (!post) {
  return Astro.redirect('/404'); // Or return a custom 404 response
}

// Format the date (ensure post.pubDate exists)
const formattedDate = post.pubDate ? new Date(post.pubDate).toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
}) : 'Date unavailable';
---

<MainLayout title={post.title} description={post.description}>
  <div class="container mx-auto px-4 py-8 lg:py-16">
    <article class="prose dark:prose-invert max-w-3xl mx-auto">
      {/* Check if post exists before trying to access properties */}
      {post && post.image && (
        <Image
          src={post.image}
          alt={post.title}
          width={1000}
          height={500}
          format="webp"
          class="mb-6 rounded-lg shadow-md w-full object-cover h-64 md:h-80"
        />
      )}
      <h1 class="text-3xl md:text-4xl font-extrabold mb-2">{post.title}</h1>
      <p class="text-gray-500 dark:text-gray-400 text-sm mb-6">
        Published on {formattedDate}
        {post.category && ` in ${post.category}`}
      </p>

      {/* Render the main blog content from the database */}
      {post && post.content && (
        <div class="text-gray-800 dark:text-gray-200">
          {/* Use Astro's Markdown component to render content */}
          <Markdown content={post.content} />
        </div>
      )}

      {/* Optional: Add related posts or comments section later */}
      <div class="mt-12 border-t pt-6">
        <a href="/blog" class="text-primary-600 hover:underline dark:text-primary-400">
          &larr; Back to Blog
        </a>
      </div>
    </article>
  </div>
</MainLayout>
