---
// src/components/admin/ImageCropper.astro
// This component encapsulates the Cropper.js functionality.
// It needs to run on the client to interact with the DOM and Cropper.js library.

// We might pass props later if needed (e.g., initial image)
// export interface Props { }
// const {} = Astro.props;
---

{/* Reverted to using <link> tag for CSS */}
<link href="/node_modules/cropperjs/dist/cropper.min.css" rel="stylesheet">

{/* Image Upload and Cropping Section */}
<div class="space-y-4 border dark:border-gray-700 p-4 rounded-lg">
  <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Upload & Crop New Profile Image (Optional)</label>

  {/* File Input */}
  <div>
    <label for="profileImageInput" class="sr-only">Choose file</label>
    <input type="file" id="profileImageInput" name="profileImageInput" accept="image/png, image/jpeg, image/gif, image/webp" class="block w-full text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 dark:text-gray-400 focus:outline-none dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400" />
    <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">PNG, JPG, GIF, or WEBP (MAX. 5MB).</p>
  </div>

  {/* Cropper Container and Preview */}
  <div class="grid grid-cols-1 md:grid-cols-2 gap-4 items-start hidden" id="cropper-ui">
    <div>
      <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Crop Area</label>
      <div id="image-cropper-container" class="w-full h-64 md:h-96 bg-gray-200 dark:bg-gray-700 rounded overflow-hidden">
        {/* Image element for Cropper */}
        <img id="image-to-crop" src="#" alt="Image to crop" class="hidden max-w-full max-h-full" />
      </div>
    </div>
    <div>
      <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Preview</label>
      {/* Preview container - Simplified styling */}
      <div id="image-preview" class="w-32 h-32 mx-auto md:mx-0" style="overflow: hidden;">
        {/* Preview is generated by Cropper.js */}
      </div>
      <div class="mt-4 flex justify-center md:justify-start space-x-2">
         <button type="button" id="crop-button" class="text-white bg-green-600 hover:bg-green-700 focus:ring-4 focus:ring-green-300 font-medium rounded-lg text-sm px-4 py-2 dark:bg-green-500 dark:hover:bg-green-600 focus:outline-none dark:focus:ring-green-800">Crop</button>
         <button type="button" id="reset-button" class="text-gray-900 bg-white border border-gray-300 hover:bg-gray-100 focus:ring-4 focus:ring-gray-200 font-medium rounded-lg text-sm px-4 py-2 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700">Reset</button>
      </div>
    </div>
  </div>
  {/* Hidden input remains part of the MAIN form in profile.astro, but this script updates it */}
  {/* <input type="hidden" name="croppedImageData" id="croppedImageData" /> */}
</div>

<script>
  // This script runs on the client because the component will have a client:* directive
  import * as CropperJS from 'cropperjs'; // Use namespace import
  // Removed CSS import from script

  // Ensure code runs only once the component's elements are in the DOM
  // Note: For client:* components, the script runs after hydration, so DOMContentLoaded isn't strictly needed here,
  // but querying elements immediately should be safe.

  console.log("ImageCropper component script executing...");

  // Query elements *within* the component's scope
  const componentRoot = document.currentScript?.closest('astro-island') || document; // Scope query if possible, fallback to document
  const imageInput = componentRoot.querySelector('#profileImageInput') as HTMLInputElement;
  const imageToCrop = componentRoot.querySelector('#image-to-crop') as HTMLImageElement;
  const cropperUI = componentRoot.querySelector('#cropper-ui');
  const cropButton = componentRoot.querySelector('#crop-button');
  const resetButton = componentRoot.querySelector('#reset-button');
  const previewContainer = componentRoot.querySelector('#image-preview');
  // IMPORTANT: The hidden input needs to be accessed globally as it's part of the main form
  const croppedImageDataInput = document.getElementById('croppedImageData') as HTMLInputElement;

  console.log("ImageCropper elements found:", { imageInput, imageToCrop, cropperUI, cropButton, resetButton, previewContainer, croppedImageDataInput });

  let cropperInstance: Cropper | null = null;
  let originalFile: File | null = null;

  if (!imageInput || !imageToCrop || !cropperUI || !cropButton || !resetButton || !previewContainer || !croppedImageDataInput) {
    console.error("ImageCropper Error: One or more required elements not found!");
  } else {
    imageInput.addEventListener('change', (event) => {
      console.log("Image input change event fired.");
      const files = (event.target as HTMLInputElement).files;
      if (files && files.length > 0) {
        originalFile = files[0];
        console.log("File selected:", originalFile.name, originalFile.type);
        const reader = new FileReader();

        reader.onload = (e) => {
          console.log("FileReader onload event fired.");
          if (e.target?.result && typeof e.target.result === 'string') {
            console.log("FileReader result available.");
            imageToCrop.src = e.target.result;
            imageToCrop.classList.remove('hidden');
            cropperUI?.classList.remove('hidden');

            if (cropperInstance) {
              console.log("Destroying previous Cropper instance.");
              cropperInstance.destroy();
            }

            console.log("Initializing Cropper...");
            try {
              console.log("Attempting to initialize Cropper with preview element:", previewContainer);
              // Instantiate using the default export from the namespace
              cropperInstance = new CropperJS.default(imageToCrop, {
                aspectRatio: 1,
                viewMode: 1,
                preview: previewContainer, // Pass the actual DOM element
                background: false,
                autoCropArea: 0.8,
                responsive: true,
                checkOrientation: false,
              });
              console.log("Cropper instance created:", cropperInstance);
            } catch (error) {
              console.error("Error initializing Cropper:", error);
              alert("Failed to initialize image cropper.");
              resetCropper();
            }
          } else {
            console.log("FileReader result not available or not a string.");
            resetCropper();
          }
        };

        reader.onerror = (error) => {
          console.error("FileReader error:", error);
          alert("Error reading file.");
          resetCropper();
        };

        reader.readAsDataURL(originalFile);
        croppedImageDataInput.value = '';

        // Dispatch custom event with file info for the main page script
        const fileInfoEvent = new CustomEvent('cropperfileinfo', {
          detail: { name: originalFile.name, type: originalFile.type }
        });
        document.dispatchEvent(fileInfoEvent);
        console.log("Dispatched cropperfileinfo event with:", fileInfoEvent.detail);

      } else {
        resetCropper();
      }
    });

    cropButton?.addEventListener('click', () => {
      console.log("Crop button clicked.");
      // Add log to inspect the instance right before use
      console.log("Inspecting cropperInstance before getCroppedCanvas:", cropperInstance);
      if (cropperInstance) {
        // Explicitly check if the method exists
        console.log("Method getCroppedCanvas exists?", typeof cropperInstance.getCroppedCanvas);
        const canvas = cropperInstance.getCroppedCanvas({
          width: 512,
          height: 512,
          imageSmoothingEnabled: true,
          imageSmoothingQuality: 'high',
        });

        if (canvas) {
          croppedImageDataInput.value = canvas.toDataURL(originalFile?.type || 'image/jpeg');
          console.log("Image cropped. Base64 data stored in hidden input.");
          cropButton.textContent = 'Cropped!';
          cropButton.classList.add('bg-green-700'); // Use Tailwind class directly
          setTimeout(() => {
              cropButton.textContent = 'Crop';
              cropButton.classList.remove('bg-green-700');
          }, 2000);
        } else {
          console.error('Could not get cropped canvas.');
          alert('Could not get cropped canvas.');
        }
      } else {
        console.warn('Cropper not initialized when attempting to crop.');
        alert('Cropper not initialized.');
      }
    });

    resetButton?.addEventListener('click', resetCropper);
  } // End of element check block

  function resetCropper() {
    console.log("Resetting cropper...");
    if (cropperInstance) {
      cropperInstance.destroy();
      cropperInstance = null;
    }
    if(imageInput) imageInput.value = '';
    if(imageToCrop) {
        imageToCrop.src = '#';
        imageToCrop.classList.add('hidden');
    }
    if(cropperUI) cropperUI.classList.add('hidden');
    if(croppedImageDataInput) croppedImageDataInput.value = '';
    originalFile = null;
    console.log("Cropper reset complete.");
  }

  // Form submission modification is removed from here.
  // It will remain in profile.astro as it needs access to the main form element.
  // This component's only job is to prepare the cropped image data in the hidden input.
</script>
